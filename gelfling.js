// Generated by CoffeeScript 1.3.3
(function() {
  var Gelfling, crypto, dgram, exports, zlib,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  zlib = require('zlib');

  dgram = require('dgram');

  crypto = require('crypto');

  exports = module.exports = function(host, port, options) {
    return new Gelfling(host, port, options);
  };

  exports.EMERGENCY = 0;

  exports.ALERT = 1;

  exports.CRITICAL = 2;

  exports.ERROR = 3;

  exports.WARNING = 4;

  exports.NOTICE = 5;

  exports.INFO = 6;

  exports.DEBUG = 7;

  exports.Gelfling = Gelfling = (function() {
    var GELF_ID, GELF_KEYS, ILLEGAL_KEYS;

    function Gelfling(host, port, options) {
      var _ref;
      this.host = host != null ? host : 'localhost';
      this.port = port != null ? port : 12201;
      if (options == null) {
        options = {};
      }
      this.maxChunkSize = this.getMaxChunkSize(options.maxChunkSize);
      this.defaults = (_ref = options.defaults) != null ? _ref : {};
    }

    Gelfling.prototype.send = function(data, callback) {
      var chunk, remaining, udpClient, _i, _len, _results,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      if (Buffer.isBuffer(data)) {
        data = [data];
      }
      if (!Array.isArray(data)) {
        return this.encode(this.convert(data), function(err, chunks) {
          if (err) {
            return callback(err);
          }
          return _this.send(chunks, callback);
        });
      }
      udpClient = dgram.createSocket('udp4');
      remaining = data.length;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        chunk = data[_i];
        _results.push(udpClient.send(chunk, 0, chunk.length, this.port, this.host, function(err) {
          if (err) {
            return callback(err);
          }
          if (--remaining === 0) {
            udpClient.close();
            return callback();
          }
        }));
      }
      return _results;
    };

    Gelfling.prototype.encode = function(msg, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return zlib.gzip(new Buffer(JSON.stringify(msg)), function(err, compressed) {
        if (err) {
          return callback(err);
        }
        return callback(null, _this.split(compressed));
      });
    };

    GELF_ID = [0x1e, 0x0f];

    Gelfling.prototype.split = function(data, chunkSize) {
      var chunkIx, dataSlice, dataStart, msgId, numChunks, _i, _results;
      if (chunkSize == null) {
        chunkSize = this.maxChunkSize;
      }
      if (data.length <= chunkSize) {
        return [data];
      }
      msgId = Array.prototype.slice.call(crypto.randomBytes(8));
      numChunks = Math.ceil(data.length / chunkSize);
      _results = [];
      for (chunkIx = _i = 0; 0 <= numChunks ? _i < numChunks : _i > numChunks; chunkIx = 0 <= numChunks ? ++_i : --_i) {
        dataStart = chunkIx * chunkSize;
        dataSlice = Array.prototype.slice.call(data, dataStart, dataStart + chunkSize);
        _results.push(new Buffer(GELF_ID.concat(msgId, chunkIx, numChunks, dataSlice)));
      }
      return _results;
    };

    GELF_KEYS = ['version', 'host', 'short_message', 'full_message', 'timestamp', 'level', 'facility', 'line', 'file'];

    ILLEGAL_KEYS = ['_id'];

    Gelfling.prototype.convert = function(msg) {
      var gelfMsg, key, val, _ref, _ref1, _ref2, _ref3, _ref4;
      if (typeof msg !== 'object') {
        msg = {
          short_message: msg
        };
      }
      gelfMsg = {};
      _ref = this.defaults;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        val = _ref[key];
        gelfMsg[key] = typeof val === 'function' ? val(msg) : val;
      }
      for (key in msg) {
        if (!__hasProp.call(msg, key)) continue;
        val = msg[key];
        if (__indexOf.call(GELF_KEYS, key) < 0) {
          key = '_' + key;
        }
        if (__indexOf.call(ILLEGAL_KEYS, key) >= 0) {
          key = '_' + key;
        }
        gelfMsg[key] = val;
      }
      if ((_ref1 = gelfMsg.version) == null) {
        gelfMsg.version = '1.0';
      }
      if ((_ref2 = gelfMsg.host) == null) {
        gelfMsg.host = require('os').hostname();
      }
      if ((_ref3 = gelfMsg.timestamp) == null) {
        gelfMsg.timestamp = +(new Date) / 1000;
      }
      if ((_ref4 = gelfMsg.short_message) == null) {
        gelfMsg.short_message = JSON.stringify(msg);
      }
      return gelfMsg;
    };

    Gelfling.prototype.getMaxChunkSize = function(size) {
      if (size == null) {
        size = 'wan';
      }
      switch (size.toLowerCase()) {
        case 'wan':
          return 1420;
        case 'lan':
          return 8154;
        default:
          return parseInt(size);
      }
    };

    return Gelfling;

  })();

}).call(this);
