// Generated by CoffeeScript 1.3.3
var Gelfling, dgram, exports, zlib,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

zlib = require('zlib');

dgram = require('dgram');

exports = module.exports = function(host, port, options) {
  return new Gelfling(host, port, options);
};

exports.Gelfling = Gelfling = (function() {
  var GELF_KEYS, HEADER_SIZE, ILLEGAL_KEYS;

  function Gelfling(host, port, options) {
    var _ref;
    this.host = host != null ? host : 'localhost';
    this.port = port != null ? port : 12201;
    if (options == null) {
      options = {};
    }
    this.maxChunkSize = this._getMaxChunkSize(options.maxChunkSize);
    this.defaults = (_ref = options.defaults) != null ? _ref : {};
  }

  Gelfling.prototype.send = function(data, callback) {
    var chunk, remaining, udpClient, _i, _len, _results,
      _this = this;
    if (callback == null) {
      callback = function() {};
    }
    if (Buffer.isBuffer(data)) {
      data = [data];
    }
    if (!(data instanceof Array)) {
      return this.encode(this.convert(data), function(err, chunks) {
        if (err) {
          return callback(err);
        }
        return _this.send(chunks, callback);
      });
    }
    udpClient = dgram.createSocket('udp4');
    remaining = data.length;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      chunk = data[_i];
      _results.push(udpClient.send(chunk, 0, chunk.length, this.port, this.host, function(err) {
        if (err) {
          return callback(err);
        }
        if (--remaining === 0) {
          udpClient.close();
          return callback();
        }
      }));
    }
    return _results;
  };

  Gelfling.prototype.encode = function(msg, callback) {
    var _this = this;
    if (callback == null) {
      callback = function() {};
    }
    return zlib.gzip(new Buffer(JSON.stringify(msg)), function(err, compressed) {
      if (err) {
        return callback(err);
      }
      return callback(null, _this.split(compressed));
    });
  };

  HEADER_SIZE = 12;

  Gelfling.prototype.split = function(data, chunkSize) {
    var chunk, chunkIx, dataEnd, dataStart, msgId, numChunks, _i, _results;
    if (chunkSize == null) {
      chunkSize = this.maxChunkSize;
    }
    if (data.length <= chunkSize) {
      return [data];
    }
    msgId = this._newMsgId();
    numChunks = Math.ceil(data.length / chunkSize);
    console.log("Size is " + data.length + ", splitting into " + numChunks + " chunks");
    _results = [];
    for (chunkIx = _i = 0; 0 <= numChunks ? _i < numChunks : _i > numChunks; chunkIx = 0 <= numChunks ? ++_i : --_i) {
      dataStart = chunkIx * chunkSize;
      dataEnd = Math.min(dataStart + chunkSize, data.length);
      chunk = new Buffer(HEADER_SIZE + (dataEnd - dataStart));
      chunk[0] = 0x1e;
      chunk[1] = 0x0f;
      msgId.copy(chunk, 2);
      chunk[10] = chunkIx;
      chunk[11] = numChunks;
      data.copy(chunk, HEADER_SIZE, dataStart, dataEnd);
      console.log("Created chunk " + chunkIx);
      _results.push(chunk);
    }
    return _results;
  };

  GELF_KEYS = ['version', 'host', 'short_message', 'full_message', 'timestamp', 'level', 'facility', 'line', 'file'];

  ILLEGAL_KEYS = ['_id'];

  Gelfling.prototype.convert = function(msg) {
    var gelfMsg, key, val, _ref, _ref1, _ref2, _ref3, _ref4;
    if (typeof msg !== 'object') {
      msg = {
        short_message: msg
      };
    }
    gelfMsg = {};
    _ref = this.defaults;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      val = _ref[key];
      gelfMsg[key] = typeof val === 'function' ? val(msg) : val;
    }
    for (key in msg) {
      if (!__hasProp.call(msg, key)) continue;
      val = msg[key];
      if (__indexOf.call(GELF_KEYS, key) < 0) {
        key = '_' + key;
      }
      if (__indexOf.call(ILLEGAL_KEYS, key) >= 0) {
        key = '_' + key;
      }
      gelfMsg[key] = val;
    }
    if ((_ref1 = gelfMsg.version) == null) {
      gelfMsg.version = '1.0';
    }
    if ((_ref2 = gelfMsg.host) == null) {
      gelfMsg.host = require('os').hostname();
    }
    if ((_ref3 = gelfMsg.timestamp) == null) {
      gelfMsg.timestamp = +(new Date) / 1000;
    }
    if ((_ref4 = gelfMsg.short_message) == null) {
      gelfMsg.short_message = JSON.stringify(msg);
    }
    return gelfMsg;
  };

  Gelfling.prototype._newMsgId = function() {
    var msgId;
    msgId = new Buffer(8);
    msgId.writeUInt32LE(Math.random() * 0x100000000, 0, true);
    msgId.writeUInt32LE(Math.random() * 0x100000000, 4, true);
    return msgId;
  };

  Gelfling.prototype._getMaxChunkSize = function(size) {
    if (size == null) {
      size = 'wan';
    }
    switch (size.toLowerCase()) {
      case 'wan':
        return 1420;
      case 'lan':
        return 8154;
      default:
        return parseInt(size);
    }
  };

  return Gelfling;

})();
